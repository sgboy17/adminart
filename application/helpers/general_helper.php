<?phpdate_default_timezone_set('Asia/Ho_Chi_Minh');function get_template(){    $CI = &get_instance();    $CI->load->library('user_agent');    if ($CI->agent->is_mobile()) {        return 'default_mobile/';    } else {        return 'default_web/';    }}function loai_bo_dau_TV($str){    $marTViet = array("?", "&", "à", "á", "ạ", "ả", "ã", "â", "ầ", "ấ", "ậ", "ẩ", "ẫ", "ă",        "ằ", "ắ", "ặ", "ẳ", "ẵ", "è", "é", "ẹ", "ẻ", "ẽ", "ê", "ề"    , "ế", "ệ", "ể", "ễ",        "ì", "í", "ị", "ỉ", "ĩ",        "ò", "ó", "ọ", "ỏ", "õ", "ô", "ồ", "ố", "ộ", "ổ", "ỗ", "ơ"    , "ờ", "ớ", "ợ", "ở", "ỡ",        "ù", "ú", "ụ", "ủ", "ũ", "ư", "ừ", "ứ", "ự", "ử", "ữ",        "ỳ", "ý", "ỵ", "ỷ", "ỹ",        "đ",        "À", "Á", "Ạ", "Ả", "Ã", "Â", "Ầ", "Ấ", "Ậ", "Ẩ", "Ẫ", "Ă"    , "Ằ", "Ắ", "Ặ", "Ẳ", "Ẵ",        "È", "É", "Ẹ", "Ẻ", "Ẽ", "Ê", "Ề", "Ế", "Ệ", "Ể", "Ễ",        "Ì", "Í", "Ị", "Ỉ", "Ĩ",        "Ò", "Ó", "Ọ", "Ỏ", "Õ", "Ô", "Ồ", "Ố", "Ộ", "Ổ", "Ỗ", "Ơ"    , "Ờ", "Ớ", "Ợ", "Ở", "Ỡ",        "Ù", "Ú", "Ụ", "Ủ", "Ũ", "Ư", "Ừ", "Ứ", "Ự", "Ử", "Ữ",        "Ỳ", "Ý", "Ỵ", "Ỷ", "Ỹ",        "Đ");    $marKoDau = array("", "", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a", "a"    , "a", "a", "a", "a", "a", "a",        "e", "e", "e", "e", "e", "e", "e", "e", "e", "e", "e",        "i", "i", "i", "i", "i",        "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o", "o"    , "o", "o", "o", "o", "o",        "u", "u", "u", "u", "u", "u", "u", "u", "u", "u", "u",        "y", "y", "y", "y", "y",        "d",        "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A", "A"    , "A", "A", "A", "A", "A",        "E", "E", "E", "E", "E", "E", "E", "E", "E", "E", "E",        "I", "I", "I", "I", "I",        "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O", "O"    , "O", "O", "O", "O", "O",        "U", "U", "U", "U", "U", "U", "U", "U", "U", "U", "U",        "Y", "Y", "Y", "Y", "Y",        "D");    $result = str_replace($marTViet, $marKoDau, $str);    return $result;}function formatTitle($title){    $title = strtolower(loai_bo_dau_TV($title));    $url = strtolower($title);    $url = strip_tags($url);    $url = stripslashes($url);    $url = html_entity_decode($url);    # Remove quotes (can't, etc.)    $url = str_replace('\'', '', $url);    # Replace non-alpha numeric with hyphens    $match = '/[^a-z0-9]+/';    $replace = '-';    $url = preg_replace($match, $replace, $url);    $url = trim($url, '-');    return $url;}function get_value($key){    if (isset($_GET[$key])) {        return $_GET[$key];    } else {        return '';    }}function get_slug($url, $full = true){    require dirname(dirname(__FILE__)) . '/config/routes.php';    foreach ($route as $slug => $control_action) {        if ($slug == 'default_controller' || $slug == '404_override') {            continue;        }        $control_action = explode('/', $control_action);        $parse_url = explode('/', $url);        if (count($control_action) != count($parse_url)) {            continue;        }        $is_match = true;        foreach ($parse_url as $key => $peice) {            $is_mask = strpos($control_action[$key], '$');            if ($is_mask === FALSE && $control_action[$key] != $peice) {                $is_match = false;            }        }        if ($is_match) {            $slug_array_begin = explode('(', $slug);            $slug_array = array();            foreach ($slug_array_begin as $k => $row) {                if ($k == 0) {                    continue;                }                $slug_array_end = explode(')', $row);                $slug_array[] = '(' . $slug_array_end[0] . ')';            }            foreach ($control_action as $key => $peice) {                $is_mask = strpos($peice, '$');                if ($is_mask !== FALSE) {                    $peice = trim($peice, '$');                    $slug = str_replace_limit($slug_array[$peice - 1], $parse_url[$key], $slug, 1);                }            }            foreach ($slug_array as $row) {                $slug = str_replace($row, '-', $slug);            }            if ($full) {                return base_url() . $slug;            } else {                return $slug;            }        }    }    if ($full) {        return base_url() . $url;    } else {        return $url;    }}function str_replace_limit($search, $replace, $string, $limit = 1){    if (is_bool($pos = (strpos($string, $search)))) {        return $string;    }    $search_len = strlen($search);    for ($i = 0; $i < $limit; $i++) {        $string = substr_replace($string, $replace, $pos, $search_len);        if (is_bool($pos = (strpos($string, $search)))) {            break;        }    }    return $string;}function image($image_path, $width = 0, $height = 0){    //Get the Codeigniter object by reference    $CI = &get_instance();    if (!file_exists($image_path) || !is_file($image_path)) {        $image_path = "upload/noimage.png";    }    if (!getimagesize($image_path)) {        $image_path = "upload/noimage.png";    }    //The new generated filename we want    $fileinfo = pathinfo($image_path);    //Alternative image if file was not found    if (!isset($fileinfo['extension'])) {        $image_path = "upload/noimage.png";        $fileinfo = pathinfo($image_path);    }    $new_image_path = $fileinfo['dirname'] . '/' . $fileinfo['filename'] . '_' . $width . 'x' . $height . '.' . $fileinfo['extension'];    //The first time the image is requested    //Or the original image is newer than our cache image    if ((!file_exists($new_image_path)) || filemtime($new_image_path) < filemtime($image_path)) {        $CI->load->library('image_lib');        //The original sizes        $original_size = getimagesize($image_path);        $original_width = $original_size[0];        $original_height = $original_size[1];        $ratio = $original_width / $original_height;        //The requested sizes        $requested_width = $width;        $requested_height = $height;        //Initialising        $new_width = 0;        $new_height = 0;        //Calculations        if ($requested_width > $requested_height) {            $new_width = $requested_width;            $new_height = $new_width / $ratio;            if ($requested_height == 0) {                $requested_height = $new_height;            }            if ($new_height < $requested_height) {                $new_height = $requested_height;                $new_width = $new_height * $ratio;            }        } else {            $new_height = $requested_height;            $new_width = $new_height * $ratio;            if ($requested_width == 0) {                $requested_width = $new_width;            }            if ($new_width < $requested_width) {                $new_width = $requested_width;                $new_height = $new_width / $ratio;            }        }        $new_width = ceil($new_width);        $new_height = ceil($new_height);        //Resizing        $config = array();        $config['image_library'] = 'gd2';        $config['source_image'] = $image_path;        $config['new_image'] = $new_image_path;        $config['maintain_ratio'] = FALSE;        $config['height'] = $new_height;        $config['width'] = $new_width;        $CI->image_lib->initialize($config);        $CI->image_lib->resize();        $CI->image_lib->clear();        //Crop if both width and height are not zero        if (($width != 0) && ($height != 0)) {            $x_axis = floor(($new_width - $width) / 2);            $y_axis = floor(($new_height - $height) / 2);            //Cropping            $config = array();            $config['source_image'] = $new_image_path;            $config['maintain_ratio'] = FALSE;            $config['new_image'] = $new_image_path;            $config['width'] = $width;            $config['height'] = $height;            $config['x_axis'] = $x_axis;            $config['y_axis'] = $y_axis;            $CI->image_lib->initialize($config);            $CI->image_lib->crop();            $CI->image_lib->clear();        }    }    return $new_image_path;}function get_readmore($original_string, $num_words = 8){    $words = array();    $words = explode(" ", $original_string, $num_words);    $shown_string = "";    if (count($words) == $num_words) {        $words[$num_words - 1] = " ... ";    }    return implode(" ", $words);}function format_save_date($date, $delimiter = '/'){    if ($date !== '') {        $date = explode($delimiter, $date);        return $date[2] . '-' . $date[1] . '-' . $date[0];    } else {        return null;    }}function format_save_date_time($date, $delimiter = '/'){    $stamp = explode(' ', $date);    $date_stamp = explode($delimiter, $stamp[0]);    return $date_stamp[2] . '-' . $date_stamp[1] . '-' . $date_stamp[0] . ' ' . $stamp[1];}function format_get_date($date, $format = 'd/m/Y', $default = ''){    if ($date != '0000-00-00 00:00:00') {        return date($format, strtotime($date));    } else {        return $default;    }}function format_get_date_time($date, $format = 'd/m/Y H:i:s', $default = ''){    if ($date != '0000-00-00 00:00:00') {        return date($format, strtotime($date));    } else {        return $default;    }}function format_12_to_24_date($date){    $date = explode(' ', $date);    if (count($date) == 2) {        if ($date[1] == 'AM') {            $date = $date[0] . ':00';        } else {            $date = explode(':', $date[0]);            if (count($date) == 2) {                if ($date[0] != 12) {                    $date = ($date[0] + 12) . ':' . $date[1] . ':00';                } else {                    $date = $date[0] . ':' . $date[1] . ':00';                }            } else {                $date = date('H:i:s');            }        }    } else {        $date = date('H:i:s');    }    return $date;}function format_get_number($number){    if ($number == 0) {        return 0;    }    return str_replace(',', '', rtrim(rtrim(number_format($number, 2), '0'), '.'));}function format_cell($data, $delimiter){    if ($delimiter == '|') {        if (empty($data)) {            return '';        }        return '|' . str_replace(',', '|', $data) . '|';    }    if ($delimiter == ',') {        if (empty($data)) {            return '';        }        return str_replace('|', ',', trim($data, '|'));    }    return '';}function get_request_url(){    $query_url = '';    if (!empty($_GET)) {        $query_url = '?';        foreach ($_GET as $key => $value) {            $query_url .= $key . '=' . $value . '&';        }        $query_url = trim($query_url, '&');    }    return $query_url;}function get_pagination_config($base_url, $total_rows, $limit){    $query_url = '?';    if (!empty($_GET)) {        foreach ($_GET as $key => $value) {            if ($key == 'per_page') {                continue;            }            $query_url .= $key . '=' . $value . '&';        }        $query_url = trim($query_url, '&');    }    $config['base_url'] = $base_url . $query_url;    $config['total_rows'] = $total_rows;    $config['per_page'] = $limit;    $config['full_tag_open'] = '<ul>';    $config['full_tag_close'] = '</ul>';    $config['prev_link'] = 'Prev';    $config['prev_tag_open'] = '<li>';    $config['prev_tag_close'] = '</li>';    $config['next_link'] = 'Next';    $config['next_tag_open'] = '<li>';    $config['next_tag_close'] = '</li>';    $config['first_link'] = '&laquo;';    $config['first_tag_open'] = '<li>';    $config['first_tag_close'] = '</li>';    $config['last_link'] = 'Last';    $config['last_tag_open'] = '<li>';    $config['last_tag_close'] = '</li>';    $config['cur_tag_open'] = '<li><a href="#" class="active">';    $config['cur_tag_close'] = '</a></li>';    $config['num_tag_open'] = '<li>';    $config['num_tag_close'] = '</li>';    $config['enable_query_strings'] = TRUE;    $config['page_query_string'] = TRUE;    return $config;}function is_serialized($value, &$result = null){    // Bit of a give away this one    if (!is_string($value)) {        return false;    }    // Serialized false, return true. unserialize() returns false on an    // invalid string or it could return false if the string is serialized    // false, eliminate that possibility.    if ($value === 'b:0;') {        $result = false;        return true;    }    $length = strlen($value);    $end = '';    switch ($value[0]) {        case 's':            if ($value[$length - 2] !== '"') {                return false;            }        case 'b':        case 'i':        case 'd':            // This looks odd but it is quicker than isset()ing            $end .= ';';        case 'a':        case 'O':            $end .= '}';            if (!isset($value[1])) {                return false;            }            if ($value[1] !== ':') {                return false;            }            switch ($value[2]) {                case 0:                case 1:                case 2:                case 3:                case 4:                case 5:                case 6:                case 7:                case 8:                case 9:                    break;                default:                    return false;            }        case 'N':            $end .= ';';            if ($value[$length - 1] !== $end[0]) {                return false;            }            break;        default:            return false;    }    if (($result = @unserialize($value)) === false) {        $result = null;        return false;    }    return true;}// return array of datefunction excuteScheduleDate($data){    if (isset($data['list_date']) && isset($data['date_start']) && $data['date_end'] != null) {        // lop        $element = array();        $arr = range(strtotime(format_save_date($data['date_start'])), (int)strtotime(format_save_date($data['date_end'])), 86400);        foreach ($arr as $key => $value) {            $getdate = getdate($value);            if (in_array($getdate['wday'], $data['list_date']) && (!isset($data['list_date_off']) || (isset($data['list_date_off']) && !in_array(date("Y-m-d", $value), $data['list_date_off'])))) {                $date_temp = $getdate['wday'];                $element[] = date("Y-m-d", $value);            }        };        return $element;    } else {        return null;    }}// return array of date and timefunction excuteSchedule($data){    if (isset($data['list_date']) && isset($data['date_start']) && $data['date_end'] != null) {        // lop        $element = array();        $arr = range(strtotime(format_save_date($data['date_start'])), (int)strtotime(format_save_date($data['date_end'])), 86400);        foreach ($arr as $key => $value) {            $getdate = getdate($value);            if (in_array($getdate['wday'], $data['list_date']) && (!isset($data['list_date_off']) || (isset($data['list_date_off']) && !in_array(date("Y-m-d", $value), $data['list_date_off'])))) {                $date_temp = $getdate['wday'];                $element[] = array(                    'date' => date("Y-m-d", $value),                    'from_time' => isset($data['from_time'][$date_temp]) ? $data['from_time'][$date_temp] : "",                    'to_time' => isset($data['to_time'][$date_temp]) ? $data['to_time'][$date_temp] : "",                );            }        };        return $element;    } else {        return null;    }}function excuteExpireDate($data, $flag = true){    if (isset($data['list_date']) && isset($data['date_start']) && $data['date_start'] != null && isset($data['total_hour'])) {        // lop        $element = array();        $count_total_time = 0;        $arr = range(strtotime(format_save_date($data['date_start'])), (int)strtotime(format_save_date($data['date_start']) . " +12 month"), 86400);        foreach ($arr as $key => $value) {            if (in_array(date("N", $value), $data['list_date']) && (!isset($data['list_date_off']) || (isset($data['list_date_off']) && !in_array(date("Y-m-d", $value), $data['list_date_off'])))) {                $date_temp = date("N", $value);                if (isset($data['study_hour']) && isset($data['date_total_time'][$date_temp])) {                    if ($data['date_total_time'][$date_temp] - $data['study_hour'] >= 0) {                        $count_total_time += (int)$data['study_hour'];                    } else {                        $count_total_time += (int)$data['date_total_time'][$date_temp];                    }                } else {                    $count_total_time += (int)$data['date_total_time'][$date_temp];                }                $element[] = array(                    'date' => date("Y-m-d", $value),                    'from_time' => isset($data['from_time'][$date_temp]) ? $data['from_time'][$date_temp] : "",                    'to_time' => isset($data['to_time'][$date_temp]) ? $data['to_time'][$date_temp] : "",                );                if ((int)$count_total_time >= (int)$data['total_hour']) {                    break;                }            }        };        if ($flag) {            return end($element);        } else {            return $element;        }    } else {        return "";    }}function updateScheduleClass($multi_student_class_id) {    $schedule_data = excuteMultiClassInProgram($multi_student_class_id);    $studentclassm = new Studentclassm();    // cap nhat ngay bat dau va ket thuc cua tung lop    if(isset($schedule_data['data'])) {        foreach ($multi_student_class_id as $v) {            $date_start[$v] = "";            $date_end[$v] = "";            foreach($schedule_data['data'] as $v1) {                if($v == $v1['student_class_id']) {                    if($date_start[$v] =="" || $date_start[$v] > $v1['day_int']) {                        $date_start[$v] = $v1['day_int'];                    }                    if($date_end[$v] =="" || $date_end[$v] < $v1['day_int']) {                        $date_end[$v] = $v1['day_int'];                    }                }            }        }        foreach ($multi_student_class_id as $v) {            $data = array(                'updated_at' => date('Y-m-d H:i:s'),            );            if(isset($date_start[$v]) && $date_start[$v] != "") {                $data['date_start'] = date("Y-m-d",$date_start[$v]);            }            if(isset($date_end[$v]) && $date_end[$v] != "") {                $data['date_end'] = date("Y-m-d",$date_end[$v]);            }           $studentclassm->updateStudentClass($v,$data);        }    }}/*function excuteTeacherFree($data) {$response = array();$check_teacher_free = true;$teacher_data = $this->teacherm->get_items();foreach($teacher_data as $k => $v) {$class_by_teacher_data = $this->classm->get_item_by_teacher_id($v['teacher_id']);if(count($class_by_teacher_data) > 0) {foreach ($class_by_teacher_data as $k1 => $v1) {$date_start_2 = $v1['date_start'];$date_end_2 = $v1['date_end'];$class_hour_data = $this->classhourm->get_item_by_class_id($v1['class_id']);}}else{$response[] = $v;}}}*/function excuteMultiClassInProgram($student_class_list_id,$extra_days = ''){    $program_list = array();    $day_in_week = array();    $exception_days = array();    $extends_base_start_days = array();    $extends_base_end_days = array();    $response_data = array();    $temp_start_date = array();    $temp_end_date = array();    $reverse_data = array();    $cont_data = array();    $dateoffm = new Dateoffm();    $studentclassm = new Studentclassm();    $changeschedulem = new Changeschedulem();    $classm = new Classm();    $classhourm = new Classhourm();    $programm = new Programm();    $actionm = new Actionm();    // ds ngay nghi    $date_off = $dateoffm->get_items();    foreach ($date_off->result() as $row) {        $exception_days[] = $row->date;    }    /*             * duyệt từng lớp    */    foreach ($student_class_list_id as $student_class_id) {        $student_class = $studentclassm->get_item_by_id($student_class_id);        // list distinct program        if (!in_array($student_class['program_id'], $program_list)) {            $total_time_count[$student_class['program_id']] = 0;            $program_list[] = $student_class['program_id'];            $extra = $actionm->get_extra_days_action($student_class['branch_id'],$student_class['student_id'],$student_class['program_id']);            if($extra_days != '')                $extra_days += $extra;            else                $extra_days = $extra;            $total_program_time[$student_class['program_id']] = $programm->get_total_time($student_class['program_id']) + $extra_days * $student_class['hour'];            $program_name = $programm->get_name($student_class['program_id']);        }        // thoi gian hoc moi buoi cua tung lop        $study_time[$student_class_id] = $student_class['hour'];        // check start date        if (!isset($start_date) || ($start_date != null && strtotime($start_date) > strtotime($student_class['date_start']))) {            $start_date = $student_class['date_start'];        }        if (!isset($end_date) || ($end_date != null && strtotime($end_date) < strtotime($student_class['date_end']))) {            $end_date = $student_class['date_end'];        }        // check start date by program        if (!isset($temp_start_date[$student_class['program_id']]) || ($temp_start_date[$student_class['program_id']] != null && strtotime($temp_start_date[$student_class['program_id']]) > strtotime($student_class['date_start']))) {            $temp_start_date[$student_class['program_id']] = $student_class['date_start'];        }        // check end date        if (!isset($temp_end_date[$student_class['program_id']]) || ($temp_end_date[$student_class['program_id']] != null && strtotime($temp_end_date[$student_class['program_id']]) < strtotime($student_class['date_end']))) {            $temp_end_date[$student_class['program_id']] = $student_class['date_end'];        }        $date_change = $changeschedulem->get_items_by_student_id($student_class['student_id']);        $class_name = $classm->get_name($student_class['class_id']);        $class_hour = $classhourm->get_hour_and_room_name_by_class_id($student_class['class_id'])->result();        foreach ($date_change->result() as $row) {            if ($row->student_class_id == $student_class_id) {                $row->hour = $student_class['hour'];                $row->program_name = $program_name;                $row->class_hour_id = isset($class_hour[0]->class_hour_id) ? $class_hour[0]->class_hour_id : "";                $row->student_id = $student_class['student_id'];                $extends_base_start_days[$student_class['program_id']][$row->from_date] = $row;                $extends_base_end_days[$student_class['program_id']][$row->to_date] = $row;                // check start date                if (strtotime($temp_start_date[$student_class['program_id']]) > strtotime($row->from_date)) {                    $temp_start_date[$student_class['program_id']] = $row->from_date;                }                if (strtotime($temp_start_date[$student_class['program_id']]) > strtotime($row->to_date)) {                    $temp_start_date[$student_class['program_id']] = $row->to_date;                }                if (strtotime($temp_end_date[$student_class['program_id']]) < strtotime($row->from_date)) {                    $temp_end_date[$student_class['program_id']] = $row->from_date;                }                if (strtotime($temp_end_date[$student_class['program_id']]) < strtotime($row->to_date)) {                    $temp_end_date[$student_class['program_id']] = $row->to_date;                }                if (strtotime($start_date) > strtotime($row->from_date)) {                    $start_date = $row->from_date;                }                if (strtotime($start_date) > strtotime($row->to_date)) {                    $start_date = $row->to_date;                }                if (strtotime($end_date) < strtotime($row->from_date)) {                    $end_date = $row->from_date;                }                if (strtotime($end_date) < strtotime($row->to_date)) {                    $end_date = $row->to_date;                }            }        }        $reverse_data[$student_class_id] = $actionm->get_reverse_action(STUDENT_STATUS_1, $student_class['student_id'], $student_class_id);        $cont_data[$student_class_id] = $actionm->get_cont_action(STUDENT_STATUS_6, $student_class['student_id'], $student_class_id);        foreach ($class_hour as $row) {            $row->hour = $student_class['hour'];            $row->class_name = $class_name;            $row->student_class_id = $student_class_id;            $row->student_id = $student_class['student_id'];            $row->program_name = $program_name;            $day_in_week[$student_class['program_id']][$row->date_id] = $row;        }    }    foreach ($program_list as $program_id) {        $date = $temp_start_date[$program_id];        // danh sách các thứ        $wday = isset($day_in_week[$program_id]) ? array_keys($day_in_week[$program_id]) : array();        // danh sách các ngày đã thay đổi dựa vào ngày bắt đầu        $list_change_day_start_date = isset($extends_base_start_days[$program_id]) ? array_keys($extends_base_start_days[$program_id]) : array();        // danh sách các ngày đã thay đổi dựa vào ngày ket thuc        $list_change_day_to_date = isset($extends_base_end_days[$program_id]) ? array_keys($extends_base_end_days[$program_id]) : array();        while (strtotime($date) <= strtotime($temp_end_date[$program_id]." +3 month")) {            if (                isset($total_time_count[$program_id]) &&                isset($total_program_time[$program_id]) &&                $total_time_count[$program_id] < $total_program_time[$program_id]            ) {                if (!in_array($date, $exception_days)) {                    $getdate = getdate(strtotime($date));                    if (in_array($getdate['wday'], $wday)) {                        if (in_array($date, $list_change_day_start_date) || in_array($date, $list_change_day_to_date)) {                            if (in_array($date, $list_change_day_to_date) && isset($extends_base_end_days[$program_id][$date])) {                                $tmp = $extends_base_end_days[$program_id][$date];                            } else if (in_array($date, $list_change_day_start_date) && isset($extends_base_start_days[$program_id][$date])) {                                $tmp = $extends_base_start_days[$program_id][$date];                            } else {                                $tmp = null;                            }                            if ($tmp != null) {                                $check_save = true;                                if (isset($reverse_data[$tmp->student_class_id]) && $reverse_data[$tmp->student_class_id] != null) {                                    $reverse_end = isset($cont_data[$tmp->student_class_id]) && $cont_data[$tmp->student_class_id] != null ? $cont_data[$tmp->student_class_id]->from : $reverse_data[$tmp->student_class_id]->to;                                    if (isset($reverse_data[$tmp->student_class_id]->created_at) &&                                        strtotime($date) >= strtotime($reverse_data[$tmp->student_class_id]->created_at) &&                                        strtotime($date) < strtotime($reverse_end)                                    ) {                                        $check_save = false;                                    }                                }                                if ($check_save == true) {                                    $total_time_count[$program_id] += (int)isset($study_time[$tmp->student_class_id]) ? $study_time[$tmp->student_class_id] : 0;                                    $response_data[] = array(                                        'student_class_id' => $tmp->student_class_id,                                        'student_id' => $tmp->student_id,                                        'class_hour_id' => $tmp->class_hour_id,                                        'class_id' => $tmp->class_id,                                        'room_name' => $tmp->room_name,                                        'class_name' => $tmp->class_name,                                        'program_name' => $tmp->program_name,                                        'day' => date("Y-m-d", strtotime($tmp->to_date)),                                        'from_time' => $tmp->from_time,                                        'to_time' => $tmp->to_time,                                        'hour' => $tmp->hour,                                        'day_int' => strtotime($tmp->to_date),                                        'note' => $tmp->note,                                    );                                    if (isset($day_in_week[$program_id][$tmp->to_date])) {                                        $tmp = $day_in_week[$program_id][$getdate['wday']];                                        $response_data[] = array(                                            'student_class_id' => $tmp->student_class_id,                                            'student_id' => $tmp->student_id,                                            'class_hour_id' => $tmp->class_hour_id,                                            'class_id' => $tmp->class_id,                                            'room_name' => $tmp->room_name,                                            'class_name' => $tmp->class_name,                                            'program_name' => $tmp->program_name,                                            'day' => date("Y-m-d", strtotime($tmp->to_date . " " . $tmp->from_time)),                                            'from_time' => $tmp->from_time,                                            'to_time' => $tmp->to_time,                                            'hour' => $tmp->hour,                                            'day_int' => strtotime($tmp->to_date),                                            'note' => $tmp->note,                                        );                                    }                                }                            }                        } else {                            $tmp = $day_in_week[$program_id][$getdate['wday']];                            $check_save = true;                            if (isset($reverse_data[$tmp->student_class_id]) && $reverse_data[$tmp->student_class_id] != null) {                                $reverse_end = isset($cont_data[$tmp->student_class_id]) && $cont_data[$tmp->student_class_id] != null ? $cont_data[$tmp->student_class_id]->from : $reverse_data[$tmp->student_class_id]->to;                                if (isset($reverse_data[$tmp->student_class_id]->created_at) &&                                    strtotime($date) >= strtotime($reverse_data[$tmp->student_class_id]->created_at) &&                                    strtotime($date) < strtotime($reverse_end)                                ) {                                    $check_save = false;                                }                            }                            if ($check_save == true) {                                $total_time_count[$program_id] += (int)isset($study_time[$tmp->student_class_id]) ? $study_time[$tmp->student_class_id] : 0;                                $response_data[] = array(                                    'student_class_id' => $tmp->student_class_id,                                    'student_id' => $tmp->student_id,                                    'class_hour_id' => $tmp->class_hour_id,                                    'class_id' => $tmp->class_id,                                    'room_name' => $tmp->room_name,                                    'class_name' => $tmp->class_name,                                    'program_name' => $tmp->program_name,                                    'day' => date("Y-m-d", strtotime($date . " " . $tmp->from_time)),                                    'from_time' => $tmp->from_time,                                    'to_time' => $tmp->to_time,                                    'hour' => $tmp->hour,                                    'day_int' => strtotime($date),                                    'note' => '',                                );                            }                        }                    }                }            }            $date = date("Y-m-d", strtotime("+1 day", strtotime($date)));        }    }    return array(        'date_start' => isset($start_date) ? $start_date : "",        'date_end' => isset($end_date) ? $end_date : "",        'data' => $response_data,    );}function excuteNextSchedule($student_class_list_id, $total_hour, $date_start = null){    $day_in_week = array();    $exception_days = array();    $response_data = array();    $dateoffm = new Dateoffm();    $studentclassm = new Studentclassm();    $classm = new Classm();    $classhourm = new Classhourm();    // ds ngay nghi    $date_off = $dateoffm->get_items();    foreach ($date_off->result() as $row) {        $exception_days[] = $row->date;    }    /*             * duyệt từng lớp    */    $start_date = date("Y-m-d");    foreach ($student_class_list_id as $student_class_id) {        $student_class = $studentclassm->get_item_by_id($student_class_id);        // thoi gian hoc moi buoi cua tung lop        $study_time[$student_class_id] = $student_class['hour'];        $class_name = $classm->get_name($student_class['class_id']);        $class_hour = $classhourm->get_hour_and_room_name_by_class_id($student_class['class_id'])->result();        foreach ($class_hour as $row) {            $row->hour = $student_class['hour'];            $row->class_name = $class_name;            $row->student_class_id = $student_class_id;            $row->student_id = $student_class['student_id'];            $day_in_week[$row->date_id] = $row;        }    }    // danh sách các thứ    $wday = isset($day_in_week) ? array_keys($day_in_week) : array();    $total_time_count = 0;    $date = $start_date;    while (strtotime($date) <= strtotime($start_date . " +1 months")) {        if (            $total_time_count < $total_hour        ) {            if (!in_array($date, $exception_days)) {                $getdate = getdate(strtotime($date));                if (in_array($getdate['wday'], $wday)) {                    $tmp = $day_in_week[$getdate['wday']];                    $total_time_count += (int)isset($study_time[$tmp->student_class_id]) ? $study_time[$tmp->student_class_id] : 0;                    $response_data[] = array(                        'student_class_id' => $tmp->student_class_id,                        'student_id' => $tmp->student_id,                        'class_hour_id' => $tmp->class_hour_id,                        'class_id' => $tmp->class_id,                        'room_name' => $tmp->room_name,                        'class_name' => $tmp->class_name,                        'day' => date("Y-m-d", strtotime($date . " " . $tmp->from_time)),                        'from_time' => $tmp->from_time,                        'to_time' => $tmp->to_time,                        'hour' => $tmp->hour,                        'day_int' => strtotime($date),                        'note' => '',                    );                }            }        }        $date = date("Y-m-d", strtotime("+1 day", strtotime($date)));    }    return array(        'data' => $response_data,    );}function excuteFutureHour($student_class_ids){    $student_schedule = array();    $studentschedulem = new Studentschedulem();    $schedule_data = excuteMultiClassInProgram($student_class_ids);    if (isset($schedule_data['data']) &&        isset($schedule_data['date_start']) &&        isset($schedule_data['date_end'])    ) {        $temp_start_date = $schedule_data['date_start'];        $temp_end_date = $schedule_data['date_end'];        usort($schedule_data['data'], function ($a, $b) {            return $a['day_int'] - $b['day_int'];        });        foreach ($schedule_data['data'] as $value) {            $student_schedule[$value['student_id']][$value['student_class_id']] = array();        }        $total_hour = 0;        foreach ($schedule_data['data'] as $value) {            if ($value['day_int'] > time()) {                $student_schedule[$value['student_id']][$value['student_class_id']][] = array(                    'date' => $value['day_int'],                    'hour' => $value['hour'],                );                $total_hour += $value['hour'];            }        }    }    return array(        'total_hour' => $total_hour,        'data' => $student_schedule,    );;}// Ham tinh toan thoi gian đã học (có diem danh) của học viên trong chuongfunction excuteStudyHour($student_class_ids){    $student_schedule = array();    $studentschedulem = new Studentschedulem();    $schedule_data = excuteMultiClassInProgram($student_class_ids);    if (isset($schedule_data['data']) &&        isset($schedule_data['date_start']) &&        isset($schedule_data['date_end'])    ) {        $temp_start_date = $schedule_data['date_start'];        $temp_end_date = $schedule_data['date_end'];        usort($schedule_data['data'], function ($a, $b) {            return $a['day_int'] - $b['day_int'];        });        foreach ($schedule_data['data'] as $value) {            $student_schedule[$value['student_id']][$value['student_class_id']] = 0;        }        foreach ($schedule_data['data'] as $value) {            $schedules = $studentschedulem->get_items_by_class_hour_id($value['class_hour_id']);            foreach ($schedules as $schedule) {                if ($schedule->date == $value['day'] && $schedule->student_id == $value['student_id']) {                    $student_schedule[$value['student_id']][$value['student_class_id']] += isset($value['hour']) ? $value['hour'] : 0;                }            }        }    }    return $student_schedule;}function excuteAbsentClass($student_class_ids) {    $student_schedule = array();    $studentschedulem = new Studentschedulem();    $changeschedulem = new Changeschedulem();    $actionm = new Actionm();    $schedule_data = excuteMultiClassInProgram($student_class_ids);    if (isset($schedule_data['data']) &&        isset($schedule_data['date_start']) &&        isset($schedule_data['date_end'])    ) {        $temp_start_date = $schedule_data['date_start'];        $temp_end_date = $schedule_data['date_end'];        usort($schedule_data['data'], function ($a, $b) {            return $a['day_int'] - $b['day_int'];        });        foreach ($schedule_data['data'] as $value) {            $date_change = $changeschedulem->get_items_by_student_id($value['student_id']);            $list_change_days = array();            foreach ($date_change->result() as $row) {                $list_change_days[] = $row->from_date;            }            $student_schedule[$value['student_id']][$value['student_class_id']] = 0;            $reverse_data[$value['student_class_id']] = $actionm->get_reverse_action(STUDENT_STATUS_1, $value['student_id'], $value['student_class_id']);            $cont_data[$value['student_class_id']] = $actionm->get_cont_action(STUDENT_STATUS_6, $value['student_id'], $value['student_class_id']);        }        $total = 0;        foreach ($schedule_data['data'] as $value) {            $schedules = $studentschedulem->get_items_by_class_hour_id($value['class_hour_id']);            foreach ($schedules as $schedule) {                if ($schedule->date == $value['day'] && $schedule->student_id == $value['student_id']) {                    $student_schedule[$value['student_id']][$value['student_class_id']] += isset($value['hour']) ? $value['hour'] : 0;                } else if(strtotime($schedule->date) <= time() ) {                    if(isset($reverse_data[$value['student_class_id']]->to) && isset($cont_data[$value['student_class_id']]->from))                        $reverse_end = isset($cont_data[$value['student_class_id']]) && $cont_data[$value['student_class_id']] != null ? $cont_data[$value['student_class_id']]->from : $reverse_data[$value['student_class_id']]->to;                    $check_save = true;                    if (isset($reverse_data[$value['student_class_id']]->created_at) &&                        strtotime($schedule->date) >= strtotime($reverse_data[$value['student_class_id']]->created_at) &&                        strtotime($schedule->date) < strtotime($reverse_end)                    ) {                        $check_save = false;                    }                    if(!in_array($schedule->date,$list_change_days) && $check_save == true) {                        $total += isset($value['hour']) ? $value['hour'] : 0;                    }                }            }        }    }    return $total;}/** * Returns the calendar's html for the given year and month. * * @param $year (Integer) The year, e.g. 2015. * @param $month (Integer) The month, e.g. 7. * @param $events (Array) An array of events where the key is the day's date * in the format "Y-m-d", the value is an array with 'text' and 'link'. * @return (String) The calendar's html. */function build_html_calendar($year, $month, $events = null){    // CSS classes    $css_cal = 'calendar';    $css_cal_row = 'calendar-row';    $css_cal_day_head = 'calendar-day-head';    $css_cal_day = 'calendar-day';    $css_cal_day_number = 'day-number';    $css_cal_day_blank = 'calendar-day-np';    $css_cal_day_event = 'calendar-day-event';    $css_cal_event = 'calendar-event';    // Table headings    $headings = ['M', 'T', 'W', 'T', 'F', 'S', 'S'];    // Start: draw table    $calendar =        "<table cellpadding='0' cellspacing='0' style='width:100%' class='{$css_cal}'>" .        "<tr class='{$css_cal_row}'>" .        "<td class='{$css_cal_day_head}'>" .        implode("</td><td class='{$css_cal_day_head}'>", $headings) .        "</td>" .        "</tr>";    // Days and weeks    $running_day = date('N', mktime(0, 0, 0, $month, 1, $year));    $days_in_month = date('t', mktime(0, 0, 0, $month, 1, $year));    // Row for week one    $calendar .= "<tr class='{$css_cal_row}'>";    // Print "blank" days until the first of the current week    for ($x = 1; $x < $running_day; $x++) {        $calendar .= "<td class='{$css_cal_day_blank}'> </td>";    }    // Keep going with days...    for ($day = 1; $day <= $days_in_month; $day++) {        // Check if there is an event today        $cur_date = date('Y-m-d', mktime(0, 0, 0, $month, $day, $year));        $draw_event = false;        if (isset($events) && isset($events[$cur_date])) {            $draw_event = true;        }        // Day cell        $calendar .= $draw_event ?            "<td class='{$css_cal_day} {$css_cal_day_event}'>" :            "<td class='{$css_cal_day}'>";        // Add the day number        $calendar .= "<div class='{$css_cal_day_number}'>" . $day . "</div>";        // Insert an event for this day        if ($draw_event) {            $calendar .= "<div class='{$css_cal_event}'>";            foreach ($events[$cur_date] as $event) {                $calendar .= "<a href='{$event['href']}'>" . $event['text'] . "</a><hr style='margin: 10px 0;'>";            }            if (count($events[$cur_date]) > 0) {                $calendar = substr($calendar, 0, strlen($calendar) - 28);            }            $calendar .= "</div>";        }        // Close day cell        $calendar .= "</td>";        // New row        if ($running_day == 7) {            $calendar .= "</tr>";            if (($day + 1) <= $days_in_month) {                $calendar .= "<tr class='{$css_cal_row}'>";            }            $running_day = 1;        } // Increment the running day        else {            $running_day++;        }    } // for $day    // Finish the rest of the days in the week    if ($running_day != 1) {        for ($x = $running_day; $x <= 7; $x++) {            $calendar .= "<td class='{$css_cal_day_blank}'> </td>";        }    }    // Final row    $calendar .= "</tr>";    // End the table    $calendar .= '</table>';    // All done, return result    return $calendar;}function ExcelToPHP($dateValue = 0, $ExcelBaseDate = 0){    if ($ExcelBaseDate == 0) {        $myExcelBaseDate = 25569;        //  Adjust for the spurious 29-Feb-1900 (Day 60)        if ($dateValue < 60) {            --$myExcelBaseDate;        }    } else {        $myExcelBaseDate = 24107;    }    // Perform conversion    if ($dateValue >= 1) {        $utcDays = $dateValue - $myExcelBaseDate;        $returnValue = round($utcDays * 86400);        if (($returnValue <= PHP_INT_MAX) && ($returnValue >= -PHP_INT_MAX)) {            $returnValue = (integer)$returnValue;        }    } else {        $hours = round($dateValue * 24);        $mins = round($dateValue * 1440) - round($hours * 60);        $secs = round($dateValue * 86400) - round($hours * 3600) - round($mins * 60);        $returnValue = (integer)gmmktime($hours, $mins, $secs);    }    // Return    return $returnValue;}function convert_number_to_words($number){    $hyphen = ' ';    $conjunction = ' ';    $separator = ' ';    $negative = 'âm ';    $decimal = ' phẩy ';    $dictionary = array(        0 => 'Không',        1 => 'Một',        2 => 'Hai',        3 => 'Ba',        4 => 'Bốn',        5 => 'Năm',        6 => 'Sáu',        7 => 'Bảy',        8 => 'Tám',        9 => 'Chín',        10 => 'Mười',        11 => 'Mười Một',        12 => 'Mười Hai',        13 => 'Mười Ba',        14 => 'Mười Bốn',        15 => 'Mười Năm',        16 => 'Mười Sáu',        17 => 'Mười Bảy',        18 => 'Mười Tám',        19 => 'Mười Chín',        20 => 'Hai Mươi',        30 => 'Ba Mươi',        40 => 'Bốn Mươi',        50 => 'Năm Mươi',        60 => 'Sáu Mươi',        70 => 'Bảy Mươi',        80 => 'Tám Mươi',        90 => 'Chín Mươi',        100 => 'Trăm',        1000 => 'Ngàn',        1000000 => 'Triệu',        1000000000 => 'Tỷ',        1000000000000 => 'Nghìn Tỷ',        1000000000000000 => 'Ngàn Triệu Triệu',        1000000000000000000 => 'Tỷ Tỷ'    );    if (!is_numeric($number)) {        return false;    }    if (($number >= 0 && (int)$number < 0) || (int)$number < 0 - PHP_INT_MAX) {        // overflow        trigger_error(            'convert_number_to_words only accepts numbers between -' . PHP_INT_MAX . ' and ' . PHP_INT_MAX,            E_USER_WARNING        );        return false;    }    if ($number < 0) {        return $negative . convert_number_to_words(abs($number));    }    $string = $fraction = null;    if (strpos($number, '.') !== false) {        list($number, $fraction) = explode('.', $number);    }    switch (true) {        case $number < 21:            $string = $dictionary[$number];            break;        case $number < 100:            $tens = ((int)($number / 10)) * 10;            $units = $number % 10;            $string = $dictionary[$tens];            if ($units) {                $string .= $hyphen . $dictionary[$units];            }            break;        case $number < 1000:            $hundreds = $number / 100;            $remainder = $number % 100;            $string = $dictionary[$hundreds] . ' ' . $dictionary[100];            if ($remainder) {                $string .= $conjunction . convert_number_to_words($remainder);            }            break;        default:            $baseUnit = pow(1000, floor(log($number, 1000)));            $numBaseUnits = (int)($number / $baseUnit);            $remainder = $number % $baseUnit;            $string = convert_number_to_words($numBaseUnits) . ' ' . $dictionary[$baseUnit];            if ($remainder) {                $string .= $remainder < 100 ? $conjunction : $separator;                $string .= convert_number_to_words($remainder);            }            break;    }    if (null !== $fraction && is_numeric($fraction)) {        $string .= $decimal;        $words = array();        foreach (str_split((string)$fraction) as $number) {            $words[] = $dictionary[$number];        }        $string .= implode(' ', $words);    }    return $string;}function sendEmailToCEO($branch_id,$type,$data = null) {    $branchm = new Branchm();    $emailm = new Emailm();    $branch_data = $branchm->get_item_by_id($branch_id);    if($branch_data['email']!= null) {        if($type =="new-invoice") {            $invoicem = new Invoicem();            if(isset($data['invoice_id'])) {                $content = html_entity_decode($invoicem->load_print($data['invoice_id'],true), ENT_QUOTES, 'UTF-8');            } else {                $content = "";            }            $emailm->sendEmailAutomatic($branch_data['email'], "[PHIẾU THU] THÔNG BÁO CÓ PHIẾU THU MỚI TỪ TRUNG TÂM ".strtoupper($branch_data['name']." LÚC ".strtoupper(date("d/m/Y H:i:s"))), $content);        }    }}